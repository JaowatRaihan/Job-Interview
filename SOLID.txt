
                    **********Open Closed principle*********
" A class should have only one responsibility. That means, only one reason to change"


public class Invoice
{
    public long InvAmount { get; set; }
    public DateTime InvDate { get; set; }
    public void AddInvoice()
    {
        try
        {
            // Here we need to write the Code for adding invoice
            // Once the Invoice has been added, then send the  mail
            MailMessage mailMessage = new MailMessage("EMailFrom", "EMailTo", "EMailSubject", "EMailBody");
            this.SendInvoiceEmail(mailMessage);
        }
        catch (Exception ex)
        {
            System.IO.File.WriteAllText(@"c:\ErrorLog.txt", ex.ToString());
        }
    }
    public void SendInvoiceEmail(MailMessage mailMessage)
    {
        try
        {
            // Here we need to write the Code for Email setting and sending the invoice mail
        }
        catch (Exception ex)
        {
            System.IO.File.WriteAllText(@"c:\ErrorLog.txt", ex.ToString());
        }
    }
}
We need to seperate the email sending logic from invoice class



            **********Open Closed principle*********
" Class, function open for extension but closed for modification"

public class Invoice
{
    public virtual double GetInvoiceDiscount(double amount)
    {
        return amount - 10;
    }
}
public class FinalInvoice : Invoice
{
    public override double GetInvoiceDiscount(double amount)
    {
        return base.GetInvoiceDiscount(amount) - 50;
    }
}
public class ProposedInvoice : Invoice
{
    public override double GetInvoiceDiscount(double amount)
    {
        return base.GetInvoiceDiscount(amount) - 40;
    }
}
public class RecurringInvoice : Invoice
{
    public override double GetInvoiceDiscount(double amount)
    {
        return base.GetInvoiceDiscount(amount) - 30;
    }
}




                    **********Liskov Substitution principle*********
" if S is a subtype of T, then objects of type T should be replaced with the objects of type S"

public class Student
    {
        public string Name { get; set; }
        public Student(string name)
        {
            Name = name;
        }
        public int GetLength()
        {
            return Name.Length;
        }
    }
    public class StudentChild : Student
    {
        public StudentChild(string name) : base(name)
        {
            Console.WriteLine("Hello from Child");
        }
        public string Damage { get; set; }
    }
    class Program
    {
        static void Main(string[] args)
        {
            Student s = new StudentChild("Helal");
            Console.WriteLine($"{s.Name} ");
        }
    }

            **********************Interface Segregation principle***********************
"Clients should not be forced to implement any methods they don’t use. Rather than one fat interface, numerous little interfaces are preferred 
based on groups of methods with each interface serving one submodule“."



public interface IPrinterTasks
{
    void Print(string PrintContent);
    void Scan(string ScanContent);
    void Fax(string FaxContent);
    void PrintDuplex(string PrintDuplexContent);
}
public class HPLaserJetPrinter : IPrinterTasks
{
    public void Print(string PrintContent)
    {
        Console.WriteLine("Print Done");
    }
    public void Scan(string ScanContent)
    {
        Console.WriteLine("Scan content");
    }
    public void Fax(string FaxContent)
    {
        Console.WriteLine("Fax content");
    }
    public void PrintDuplex(string PrintDuplexContent)
    {
        Console.WriteLine("Print Duplex content");
    }
}
class LiquidInkjetPrinter : IPrinterTasks
{
    public void Print(string PrintContent)
    {
        Console.WriteLine("Print Done");
    }
    public void Scan(string ScanContent)
    {
        Console.WriteLine("Scan content");
    }
    public void Fax(string FaxContent)
    {
        throw new NotImplementedException();
    }
    public void PrintDuplex(string PrintDuplexContent)
    {
        throw new NotImplementedException();
    }
}

So, we need to create smaller interface to implement Interface segregation principle 



 **********************Dependency Inversion principle***********************
""

